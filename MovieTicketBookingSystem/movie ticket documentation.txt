MOVIE TICKET BOOKING SYSTEM
DOCUMENTATION
Introduction
	It is an application that allows the users to book movie ticket. It allows the theaters to add a 	shows so all users can see them  and admin can manage all users, theaters and movies
Features
	User registration , login , profile update , booking and cancelling movie ticket, add and delete 	review 	.
	theater login, profile update, adding and deleting shows for theater, get list of movies and 	shows.
	Admin registration , login , profile update, managing users, managing theaters, managing  	movies , set active or inactive for users , theaters and movies.

Configuration
	Using Envirnmental variables for configuration
PORT - Specifies the port number on which the server runs.
MONGO_CLIENT - Specifies the url for the mongoose database
   
Dependencies
express - node js framework.
mongoose - mongoDB framework.
body-parser - To parse the encoded body .
express-session - To create a session that doesnot lose data when browser closes.
connect-mongodb-session - To store the session in database.
dotenv - to set envirnmental variable that is needed to hide confidential information.
jsonwebtoken - used to create and verify token for user authentication and authorization.
moment - used to get current timestamp.
nodemailer - To send mail through the project.
puppeteer - To generate pdf from a html template dynamically

Architecture
	In this this project model view controller  architecture is used.
	models
	Models are the mongoose database collection that represent specific data.
	5 models are used in this project.
admin.js - mongoose model for admin related data.
theater.js - mongoose model for theater related data.
user.js - mongoose model for user related data.
movie.js - mongoose model for storing movies.
log.js - mongoose model for storing booking information and status.
token.js - mongoose model for storing tokens generated. 

	Controller
	Controllers are the middleware that controlls the and manipulated the models according to the 	requests
	3 models are used in this project.
Admin.js - In this controller file all the request from the admin routes are processed. Appropriate manipulations are done to the models according to the request.
theater.js - In this controller file all the request from the theater routes are processed. Appropriate manipulations are done to the models according to the request.
user.js - In this controller file all the request from the user routes are processed. Appropriate manipulations are done to the models according to the request.

API Documentation
	Admin
POST  /signup -  Create a new admin account . 
POST  /login - login to admin account 
POST  /add-movie/:token - add movie to the system
POST  /add-theater/:token - add theater to the system.
POST /delete-theater/:theaterId/:token - delete a theater from the system.
POST /edit-theater/:theaterId/:token - edit a theater details from the system.
POST /delete-movie/:movieId/:token - delete a movie from the system.
POST /edit-movie/:movieId/:token - edit movie details from a system.
POST /delete-user/:userId/:token - delete user details from a system.
POST /edit-user/:userId/:token - edit user details from a system.
POST /user-activity/:userId/:token - change the active status of a user to true and false.
POST /movie-activity/:movieId/:token - change the active status of a movie to true and false.
POST /theater-activity/:theaterId/:token - change status of a Theater to true and false.
POST  /logout - logout from  admin account 
GET /movies/location/:location/:token - get movies in a specific location.
GET /movies/:moviename/:token - get movies using a keyword.
GET /movies/:token - get all movies
GET /users/:token - get all users
GET /theaters/:token - get all theaters
	Theater
POST  /login - login to theater account .
POST  /logout - logout from  theater account.
POST /add-show/:token - add a show  in the theater.
POST /update-show/:theaterId/:token - edit a show  details in the theater .
POST /delete-show/:theaterId/:token - delete  a show in the theater .
POST /update-password/:token - update password of theater account
GET /movies/:token - get all movies.
GET /shows/:token - get all users.
GET /movies/:moviename/:token - get movies using a keyword.
	User
POST  /signup -  Create a new user account . 
POST  /login - login to user account .
POST  /logout - logout from  user account.
POST /book-show/:token - book ticket for the movie.
POST /cancel-ticket/:bookingId/:token - cancel already booked tickets.
POST /update-password/:token - update password of user account.
POST /edit-profile/:token - edit the user profile.
GET /movies/:token - get all movies.
GET /movies/:moviename/:token - get movies using a keyword.
GET /theaters/:token - get all theaters.
GET /movies/location/:location/:token - get movies in a specific location.
POST /add -review/:token - Add a review on movie
POST /update-review/:movieId/:token - edit the movie review
POST /delete-review/:movieId/:token - delete the  movie review 

Middleware 
	Other than controllers there are some other middleware functions  are used in this project.
	authenticate.js - some token authentications and authorizations middlewares are used in here.
Conclusion
	In this project we can easily book movie tickets from any theaters accross the world. we also 	provide cancellation of ticket. 




	

		


	
